name: MLFlow and Snakemake Workflow

on:
  schedule:
    - cron: '0 8 * * *'  # Run daily at 8:00 UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MLFLOW_URL: https://84b9-41-140-86-86.ngrok-free.app/
  PUSHGATEWAY_URL: https://5c6e-41-140-86-86.ngrok-free.app

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('Backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Verify requirements.txt
        run: |
          if [ ! -f Backend/requirements.txt ]; then
            echo "Error: Backend/requirements.txt not found"
            ls -R
            exit 1
          fi
          echo "Backend/requirements.txt found"
          cat Backend/requirements.txt
        shell: bash

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r Backend/requirements.txt
          pip list | grep ipykernel || { echo "Erreur : ipykernel non installé"; exit 1; }
          pip list | grep google-api-python-client || { echo "Erreur : google-api-python-client non installé"; exit 1; }
        shell: bash

      - name: Install Jupyter kernel
        run: |
          source venv/bin/activate
          python -m ipykernel install --user --name python3 --display-name "Python 3 (venv)"
          echo "Kernel Jupyter installé avec succès."
        shell: bash

      - name: Save Google Drive token
        run: |
          echo "${{ secrets.GOOGLE_DRIVE_TOKEN }}" | jq '.' > token.json
          if [ -s token.json ]; then
            echo "token.json créé avec succès."
            cat token.json | jq . || { echo "Erreur : token.json n'est pas un JSON valide"; exit 1; }
          else
            echo "Erreur : token.json est vide ou n'a pas pu être créé."
            exit 1
          fi
        shell: bash

      - name: Download notebook and scripts
        run: |
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/ppo_pipeline.ipynb -O ppo_pipeline.ipynb
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/train_ppo.py -O train_ppo.py
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/evaluate_ppo.py -O evaluate_ppo.py
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/BESSBatteryEnv.py -O BESSBatteryEnv.py
        shell: bash

      - name: Download LSTM predictions from Google Drive
        run: |
          source venv/bin/activate
          python Backend/download_file.py || { echo "Échec de l'étape Download LSTM predictions from Google Drive"; exit 1; }
          if [ -f lstm_predictions_charger.csv ]; then
            echo "Fichier lstm_predictions_charger.csv téléchargé avec succès."
            ls -l lstm_predictions_charger.csv
          else
            echo "Erreur : lstm_predictions_charger.csv n'a pas été créé."
            exit 1
          fi
        shell: bash

      - name: Execute notebook
        run: |
          source venv/bin/activate
          mkdir -p output
          python -m papermill ppo_pipeline.ipynb output/ppo_pipeline_executed.ipynb \
            -p MLFLOW_URL $MLFLOW_URL \
            -p PUSHGATEWAY_URL $PUSHGATEWAY_URL \
            -p output_dir output \
            -p file_path lstm_predictions_charger.csv \
            --kernel python3
          echo "Vérification des fichiers JSON générés :"
          ls -l output/*.json || echo "Aucun fichier JSON trouvé dans output/"
        shell: bash

      - name: Check PushGateway accessibility
        run: |
          echo "Vérification de l'accessibilité de la PushGateway : $PUSHGATEWAY_URL"
          echo "Envoi de la métrique de test vers $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics"
          STATUS=$(echo "test_accessibility{job=\"mlflow_and_snakemake_metrics\"} 1" | curl -s -L -w "%{http_code}" --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics -o /dev/null)
          if [ "$STATUS" -eq 200 ]; then
            echo "PushGateway accessible, code HTTP : $STATUS"
            echo "Vérification de la métrique test_accessibility dans PushGateway :"
            curl -s -L $PUSHGATEWAY_URL/metrics | grep test_accessibility || echo "Métrique test_accessibility non trouvée"
          else
            echo "Erreur : PushGateway renvoie le code HTTP $STATUS"
            exit 1
          fi
        shell: bash

      - name: Push selected MLFlow metrics to Prometheus
        run: |
          source venv/bin/activate
          declare -A metrics_92f5=(
            [loss]=0.04144944250583649
            [mae]=0.1347774024638297
            [mse]=0.039917658308037784
            [r2_score]=0.6619863834818595
            [rmse]=0.19979403972100315
          )
          declare -A metrics_ad0c=(
            [aic]=3157.583271036795
            [bic]=3180.9434357641003
            [df_model]=5
            [df_resid]=Inf
            [llf]=-1573.7916355183975
            [mse]=0.005455112014267468
            [scale]=1
          )
          echo "Envoi des métriques metrics_92f5..."
          for key in "${!metrics_92f5[@]}"; do
            value=${metrics_92f5[$key]}
            echo "Envoi : $key{run=\"92f5893e1dbe4175a3f4313bc89c56b4\",job=\"mlflow_and_snakemake_metrics\"} $value"
            STATUS=$(echo "$key{run=\"92f5893e1dbe4175a3f4313bc89c56b4\",job=\"mlflow_and_snakemake_metrics\"} $value" | curl -s -L -w "%{http_code}" --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics -o /dev/null)
            if [ "$STATUS" -eq 200 ]; then
              echo "Succès : Métrique $key envoyée, code HTTP $STATUS"
            else
              echo "Erreur : Échec de l'envoi de la métrique $key, code HTTP $STATUS"
              exit 1
            fi
          done
          echo "Envoi des métriques metrics_ad0c..."
          for key in "${!metrics_ad0c[@]}"; do
            value=${metrics_ad0c[$key]}
            echo "Envoi : $key{run=\"ad0cf78265204f34b84a40aa09895c7f\",job=\"mlflow_and_snakemake_metrics\"} $value"
            STATUS=$(echo "$key{run=\"ad0cf78265204f34b84a40aa09895c7f\",job=\"mlflow_and_snakemake_metrics\"} $value" | curl -s -L -w "%{http_code}" --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics -o /dev/null)
            if [ "$STATUS" -eq 200 ]; then
              echo "Succès : Métrique $key envoyée, code HTTP $STATUS"
            else
              echo "Erreur : Échec de l'envoi de la métrique $key, code HTTP $STATUS"
              exit 1
            fi
          done
          echo "Vérification des fichiers PPO JSON :"
          if [ -f output/ppo_bess_model_metrics.json ]; then
            echo "Fichier ppo_bess_model_metrics.json trouvé. Contenu :"
            cat output/ppo_bess_model_metrics.json | jq . || echo "Erreur : ppo_bess_model_metrics.json n'est pas un JSON valide"
            TRAIN_METRICS=$(cat output/ppo_bess_model_metrics.json | jq -r 'to_entries[] | .key + "{run=\"ppo_training\",job=\"ppo_metrics\"} " + (.value | tostring)')
            if [ -z "$TRAIN_METRICS" ]; then
              echo "Erreur : Aucune métrique trouvée dans ppo_bess_model_metrics.json"
              exit 1
            else
              while IFS= read -r metric; do
                echo "Envoi de la métrique PPO (entraînement) : $metric"
                STATUS=$(echo "$metric" | curl -s -L -w "%{http_code}" --data-binary @- $PUSHGATEWAY_URL/metrics/job/ppo_metrics -o /dev/null)
                if [ "$STATUS" -eq 200 ]; then
                  echo "Succès : Métrique PPO envoyée, code HTTP $STATUS"
                else
                  echo "Erreur : Échec de l'envoi de la métrique PPO, code HTTP $STATUS"
                  exit 1
                fi
              done <<< "$TRAIN_METRICS"
            fi
          else
            echo "Erreur : ppo_bess_model_metrics.json non trouvé. Aucune métrique PPO d'entraînement envoyée."
            exit 1
          fi
          if [ -f output/evaluation_metrics.json ]; then
            echo "Fichier evaluation_metrics.json trouvé. Contenu :"
            cat output/evaluation_metrics.json | jq . || echo "Erreur : evaluation_metrics.json n'est pas un JSON valide"
            EVAL_METRICS=$(cat output/evaluation_metrics.json | jq -r 'to_entries[] | .key + "{run=\"ppo_evaluation\",job=\"ppo_metrics\"} " + (.value | tostring)')
            if [ -z "$EVAL_METRICS" ]; then
              echo "Erreur : Aucune métrique trouvée dans evaluation_metrics.json"
              exit 1
            else
              while IFS= read -r metric; do
                echo "Envoi de la métrique PPO (évaluation) : $metric"
                STATUS=$(echo "$metric" | curl -s -L -w "%{http_code}" --data-binary @- $PUSHGATEWAY_URL/metrics/job/ppo_metrics -o /dev/null)
                if [ "$STATUS" -eq 200 ]; then
                  echo "Succès : Métrique PPO envoyée, code HTTP $STATUS"
                else
                  echo "Erreur : Échec de l'envoi de la métrique PPO, code HTTP $STATUS"
                  exit 1
                fi
              done <<< "$EVAL_METRICS"
            fi
          else
            echo "Erreur : evaluation_metrics.json non trouvé. Aucune métrique PPO d'évaluation envoyée."
            exit 1
          fi
        shell: bash

      - name: Push global success metric to Prometheus
        run: |
          STATUS=$(echo "success{job=\"mlflow_and_snakemake_metrics\"} 1" | curl -s -L -w "%{http_code}" --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics -o /dev/null)
          if [ "$STATUS" -eq 200 ]; then
            echo "Succès : Métrique success envoyée, code HTTP $STATUS"
          else
            echo "Erreur : Échec de l'envoi de la métrique success, code HTTP $STATUS"
            exit 1
          fi
        shell: bash

      - name: Check metrics in PushGateway
        run: |
          echo "🔍 Vérification des métriques dans PushGateway..."
          curl -s -L $PUSHGATEWAY_URL/metrics | grep -E 'scale|loss|mae|mse|aic|bic|llf|r2_score|rmse|df_model|df_resid|success|avg_reward|avg_cycles|avg_accuracy|total_reward|cycles|accuracy' || echo "⚠️ Pas de métriques visibles"
        shell: bash

      - name: Complete Monitoring
        run: |
          echo "✅ Fin de l'exécution, vérification via Grafana et Prometheus"
        shell: bash

      - name: Notify on build results
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'ci-notifications'
          slack-message: |
            Build job for ${{ github.repository }} completed.
            Status: ${{ job.status }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Record build workflow metrics
        run: |
          START_TIME=$(date +%s)
          # Simulate build execution (already done in previous steps)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "workflow_duration{job=\"build\",repository=\"${{ github.repository }}\"} $DURATION" | curl -s -L --data-binary @- $PUSHGATEWAY_URL/metrics/job/workflow_metrics
        shell: bash

  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('Backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Verify requirements.txt
        run: |
          if [ ! -f Backend/requirements.txt ]; then
            echo "Error: Backend/requirements.txt not found"
            ls -R
            exit 1
          fi
          echo "Backend/requirements.txt found"
          cat Backend/requirements.txt
        shell: bash

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r Backend/requirements.txt
        shell: bash

      - name: Lint and format code
        run: |
          source venv/bin/activate
          black --check .
          flake8 . --max-line-length=88 --extend-ignore=E203
        shell: bash

      - name: Download BESSBatteryEnv script
        run: |
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/BESSBatteryEnv.py -O BESSBatteryEnv.py
          if [[ ! -s BESSBatteryEnv.py ]]; then
            echo "Error: BESSBatteryEnv.py is missing or empty"
            exit 1
          fi
          ls -l BESSBatteryEnv.py
        shell: bash

      - name: Create and validate test CSV
        run: |
          source venv/bin/activate
          python -c "
          import pandas as pd
          data = pd.DataFrame({
              'energyproduced': [100, 200, 300],
              'predicted_demand': [250, 350, 450],
              'demand': [240, 340, 440]
          })
          data.to_csv('test_lstm_predictions.csv', index=False)
          df = pd.read_csv('test_lstm_predictions.csv')
          required_columns = ['energyproduced', 'predicted_demand', 'demand']
          if not all(col in df.columns for col in required_columns):
            print('Error: Missing required columns in CSV')
            exit(1)
          if df.empty:
            print('Error: CSV is empty')
            exit(1)
          print('CSV validated successfully')
          "
          ls -l test_lstm_predictions.csv
        shell: bash

      - name: Run integration tests
        run: |
          source venv/bin/activate
          export PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE
          pytest tests/ --html=report.html --self-contained-html --junitxml=test-results.xml -v
        shell: bash

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            test-results.xml
            report.html
            *.log

      - name: Notify on test results
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'ci-notifications'
          slack-message: |
            Integration test for ${{ github.repository }} completed.
            Status: ${{ job.status }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Record workflow metrics
        run: |
          START_TIME=$(date +%s)
          # Simulate test execution (already done in previous step)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "workflow_duration{job=\"integration_test\",repository=\"${{ github.repository }}\"} $DURATION" | curl -s -L --data-binary @- $PUSHGATEWAY_URL/metrics/job/workflow_metrics
        shell: bash

      - name: Clean up old artifacts
        uses: crazy-max/ghaction-cleanup-artifacts@v1
        with:
          artifact-name: test-artifacts
          older-than-days: 7
