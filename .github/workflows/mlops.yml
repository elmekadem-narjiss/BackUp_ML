name: MLFlow and Snakemake Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MLFLOW_URL: https://4af2-160-176-233-39.ngrok-free.app
  PUSHGATEWAY_URL: https://e546-160-179-231-239.ngrok-free.app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install mlflow prometheus_client jq snakemake
        shell: bash

      - name: Preprocess Data (Inline with Snakemake)
        run: |
          # Utilisation de Snakemake pour g√©rer le pr√©traitement des donn√©es
          echo "rule preprocess:
              input:
                  'data/raw_data.csv'
              output:
                  'data/processed.csv'
              shell:
                  'cat {input} | awk \"{print \$1 * 2}\" > {output}'
          " > Snakefile
          snakemake -s Snakefile --cores 1
        shell: bash

      - name: Train Model (Inline with Snakemake)
        run: |
          # Utilisation de Snakemake pour entra√Æner un mod√®le
          echo "rule train:
              input:
                  'data/processed.csv'
              output:
                  'results/model.pkl'
              shell:
                  'python -c \"import pandas as pd; from sklearn.linear_model import LinearRegression; df = pd.read_csv('{input}'); model = LinearRegression(); model.fit(df[['value']], df['value']); import pickle; pickle.dump(model, open('{output}', 'wb'))\"'
          " >> Snakefile
          snakemake -s Snakefile --cores 1
        shell: bash

      - name: Evaluate Model (Inline with Snakemake)
        run: |
          # Utilisation de Snakemake pour √©valuer le mod√®le
          echo "rule evaluate:
              input:
                  'data/processed.csv',
                  'results/model.pkl'
              output:
                  'results/metrics.txt'
              shell:
                  'python -c \"import pickle; from sklearn.metrics import mean_squared_error; import pandas as pd; df = pd.read_csv('{input[0]}'); model = pickle.load(open('{input[1]}', 'rb')); predictions = model.predict(df[['value']]); mse = mean_squared_error(df['value'], predictions); with open('{output}', 'w') as f: f.write(f'MSE: {mse}')\"'
          " >> Snakefile
          snakemake -s Snakefile --cores 1
        shell: bash

      - name: Push selected MLFlow metrics to Prometheus
        run: |
          source venv/bin/activate
          declare -A metrics_92f5=( 
            [loss]=0.04144944250583649
            [mae]=0.1347774024638297
            [mse]=0.039917658308037784
            [r2_score]=0.6619863834818595
            [rmse]=0.19979403972100315
          )
          declare -A metrics_ad0c=( 
            [aic]=3157.583271036795
            [bic]=3180.9434357641003
            [df_model]=5
            [df_resid]=Inf
            [llf]=-1573.7916355183975
            [mse]=0.005455112014267468
            [scale]=1
          )
          for key in "${!metrics_92f5[@]}"; do
            value=${metrics_92f5[$key]}
            echo "$key{run=\"92f5893e1dbe4175a3f4313bc89c56b4\"} $value" \
              | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics
          done
          for key in "${!metrics_ad0c[@]}"; do
            value=${metrics_ad0c[$key]}
            echo "$key{run=\"ad0cf78265204f34b84a40aa09895c7f\"} $value" \
              | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics
          done
        shell: bash

      - name: Push global success metric to Prometheus
        run: |
          echo "success 1" \
            | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics
        shell: bash

      - name: Check metrics in PushGateway
        run: |
          echo "üîç V√©rification des m√©triques dans PushGateway..."
          curl -s $PUSHGATEWAY_URL/metrics | grep -E 'scale|loss|mae|mse|aic|bic|llf|r2_score|rmse|df_model|df_resid|success' || echo "‚ö†Ô∏è Pas de m√©triques visibles"
        shell: bash

      - name: Complete Monitoring
        run: echo "‚úÖ Fin de l'ex√©cution, v√©rification via Grafana et Prometheus"
        shell: bash
