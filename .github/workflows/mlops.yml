name: MLFlow and Snakemake Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MLFLOW_URL: https://4af2-160-176-233-39.ngrok-free.app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install mlflow prometheus_client snakemake pulp==2.7.0 jq
        shell: bash

      - name: Start Prometheus PushGateway
        run: |
          docker run -d -p 9091:9091 prom/pushgateway
          sleep 5
        shell: bash

      - name: Fetch and push MLFlow metrics to Prometheus
        run: |
          source venv/bin/activate
          echo "üì° Interrogation de MLFlow..."
          response=$(curl -s -H "Content-Type: application/json" \
            -d '{"max_results": 100}' \
            "$MLFLOW_URL/api/2.0/mlflow/experiments/search")
          
          if echo "$response" | jq -e '.experiments != null and (.experiments | length > 0)' > /dev/null; then
            echo "‚úÖ R√©ponse valide de MLFlow :"
            echo "$response"
            experiments=$(echo "$response" | jq -r '.experiments[].experiment_id')
            for exp in $experiments; do
              echo "üîç Exp√©rience ID: $exp"
              runs=$(curl -s -H "Content-Type: application/json" \
                -d "{\"experiment_ids\": [\"$exp\"]}" \
                $MLFLOW_URL/api/2.0/mlflow/runs/search)
              if echo "$runs" | jq -e '.runs != null and (.runs | length > 0)' > /dev/null; then
                run_ids=$(echo "$runs" | jq -r '.runs[].info.run_id')
                for run in $run_ids; do
                  echo "üìä Analyse du run: $run"
                  # Fetch the metrics for each run using get-history API
                  metric_response=$(curl -s -X GET "$MLFLOW_URL/api/2.0/mlflow/metrics/get-history?run_id=$run&metric_key=scale")
                  if echo "$metric_response" | jq -e '.history != null and (.history | length > 0)' > /dev/null; then
                    metrics=$(echo "$metric_response" | jq -r '.history[] | .value')
                    for metric_value in $metrics; do
                      echo "Valeur de la m√©trique 'scale' : $metric_value"
                      # Push metric to Prometheus
                      echo "scale{experiment=\"$exp\",run=\"$run\"} $metric_value" \
                        | curl --data-binary @- http://localhost:9091/metrics/job/mlflow_metrics
                    done
                  else
                    echo "‚ö†Ô∏è Aucune m√©trique 'scale' trouv√©e pour le run $run."
                  fi
                done
              else
                echo "‚ö†Ô∏è Aucun run trouv√© pour l'exp√©rience $exp."
              fi
            done
          else
            echo "‚ùå Aucune exp√©rience trouv√©e dans MLFlow."
            echo "$response"
            exit 1
          fi
        shell: bash

      - name: Push global success metric to Prometheus
        run: |
          echo "success 1" | curl --data-binary @- http://127.0.0.1:9091/metrics/job/mlflow_metrics
        shell: bash

      - name: Check metrics in PushGateway
        run: |
          echo "V√©rification des m√©triques dans PushGateway..."
          if curl -s http://127.0.0.1:9091/metrics | grep -q 'success'; then
            echo "‚úÖ Les m√©triques sont pr√©sentes dans PushGateway."
          else
            echo "‚ùå Aucune m√©trique trouv√©e dans PushGateway."
          fi
        shell: bash

      - name: Complete Monitoring
        run: echo "‚úÖ Fin de l'ex√©cution, v√©rification via Grafana et Prometheus"
        shell: bash
