name: MLFlow and Snakemake Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MLFLOW_URL: https://4af2-160-176-233-39.ngrok-free.app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install mlflow prometheus_client snakemake pulp==2.7.0 jq
        shell: bash

      - name: Start MLFlow server
        run: |
          source venv/bin/activate
          nohup mlflow ui --host 0.0.0.0 --port 5000 & 
          until curl -s http://localhost:5000 > /dev/null; do
            echo "üì° Attente que MLFlow soit pr√™t..."
            sleep 5
          done
          echo "‚úÖ MLFlow est pr√™t."
        shell: bash

      - name: Create a new run and log metrics to MLFlow
        run: |
          echo "üì° Cr√©ation d'un nouveau run dans MLFlow..."
          run_response=$(curl -s -X POST -H "Content-Type: application/json" \
            -d '{
                  "experiment_id": "0", 
                  "run_name": "GitHub_Run_'"$(date +%Y%m%d%H%M%S)"'",
                  "start_time": '$(date +%s000)'
                }' \
            $MLFLOW_URL/api/2.0/mlflow/runs/create)

          run_id=$(echo "$run_response" | jq -r '.run.info.run_id')
          echo "‚úÖ Run cr√©√© avec l'ID: $run_id"

          echo "üìä Envoi de m√©triques simul√©es √† MLFlow..."
          curl -s -X POST -H "Content-Type: application/json" \
            -d '{
                  "run_id": "'"$run_id"'",
                  "key": "accuracy",
                  "value": 0.95,
                  "timestamp": '$(date +%s000)',
                  "step": 1
                }' \
            $MLFLOW_URL/api/2.0/mlflow/runs/log-metric

          curl -s -X POST -H "Content-Type: application/json" \
            -d '{
                  "run_id": "'"$run_id"'",
                  "key": "loss",
                  "value": 0.05,
                  "timestamp": '$(date +%s000)',
                  "step": 1
                }' \
            $MLFLOW_URL/api/2.0/mlflow/runs/log-metric

          echo "‚úÖ M√©triques enregistr√©es dans MLFlow."
        shell: bash

      - name: Start Prometheus PushGateway
        run: |
          docker run -d -p 9091:9091 prom/pushgateway
          sleep 5
        shell: bash

      - name: Push global success metric to Prometheus
        run: |
          echo "success 1" | curl --data-binary @- http://127.0.0.1:9091/metrics/job/mlflow_metrics
        shell: bash

      - name: Check metrics in PushGateway
        run: |
          echo "V√©rification des m√©triques dans PushGateway..."
          if curl -s http://127.0.0.1:9091/metrics | grep -q 'success'; then
            echo "‚úÖ Les m√©triques sont pr√©sentes dans PushGateway."
          else
            echo "‚ùå Aucune m√©trique trouv√©e dans PushGateway."
          fi
        shell: bash

      - name: Complete Monitoring
        run: echo "‚úÖ Fin de l'ex√©cution, v√©rification via Grafana et Prometheus"
        shell: bash
