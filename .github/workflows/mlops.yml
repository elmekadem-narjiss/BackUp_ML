name: MLFlow and Snakemake Workflow

on:
  schedule:
    - cron: '0 8 * * *'  # Run daily at 8:00 UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MLFLOW_URL: ${{ secrets.MLFLOW_URL || '' }}
      PUSHGATEWAY_URL: ${{ secrets.PUSHGATEWAY_URL || '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('Backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Verify requirements.txt
        run: |
          if [ ! -f Backend/requirements.txt ]; then
            echo "Error: Backend/requirements.txt not found"
            ls -R
            exit 1
          fi
          echo "Backend/requirements.txt found"
          cat Backend/requirements.txt
        shell: bash

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r Backend/requirements.txt
          pip install snakemake papermill mlflow
          pip install yq==2.14.0
          pip list | grep ipykernel || pip install ipykernel
          pip list | grep snakemake || { echo "Erreur : snakemake non installé"; exit 1; }
          pip list | grep papermill || { echo "Erreur : papermill non installé"; exit 1; }
          pip list | grep mlflow || { echo "Erreur : mlflow non installé"; exit 1; }
          pip list | grep yq || { echo "Erreur : yq non installé"; exit 1; }
        shell: bash

      - name: Install Jupyter kernel
        run: |
          source venv/bin/activate
          python -m ipykernel install --user --name python3 --display-name "Python 3 (venv)"
          echo "Kernel Jupyter installé avec succès."
        shell: bash

      - name: Verify config.yaml
        run: |
          source venv/bin/activate
          if [ ! -f Backend/config.yaml ]; then
            echo "Error: Backend/config.yaml not found"
            ls -R Backend/
            exit 1
          fi
          echo "Backend/config.yaml found"
          cat Backend/config.yaml
          yq --version || echo "Erreur : Impossible de vérifier la version de yq"
          MLFLOW_URL=$(yq .mlflow.url Backend/config.yaml | tr -d '"')
          PUSHGATEWAY_URL=$(yq .pushgateway.url Backend/config.yaml | tr -d '"')
          if [ -z "$MLFLOW_URL" ]; then
            echo "Erreur : mlflow.url non défini dans config.yaml"
            exit 1
          fi
          if [ -z "$PUSHGATEWAY_URL" ]; then
            echo "Erreur : pushgateway.url non défini dans config.yaml"
            exit 1
          fi
          echo "MLFLOW_URL=$MLFLOW_URL"
          echo "PUSHGATEWAY_URL=$PUSHGATEWAY_URL"
          echo "MLFLOW_URL=$MLFLOW_URL" >> $GITHUB_ENV
          echo "PUSHGATEWAY_URL=$PUSHGATEWAY_URL" >> $GITHUB_ENV
        shell: bash

      - name: Download notebook and scripts
        run: |
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/ppo_pipeline.ipynb -O ppo_pipeline.ipynb
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/download_file.py -O Backend/download_file.py
        shell: bash

      - name: Run Snakemake pipeline
        run: |
          source venv/bin/activate
          snakemake --snakefile Backend/Snakefile --cores 1 --verbose
        shell: bash

      - name: Push selected MLFlow metrics to Prometheus
        run: |
          source venv/bin/activate
          if [ -f output/ppo_bess_model_metrics.json ]; then
            echo "Fichier ppo_bess_model_metrics.json trouvé. Contenu :"
            cat output/ppo_bess_model_metrics.json || echo "Erreur : Impossible de lire ppo_bess_model_metrics.json"
          else
            echo "Erreur : ppo_bess_model_metrics.json non trouvé."
          fi
          if [ -f output/evaluation_metrics.json ]; then
            echo "Fichier evaluation_metrics.json trouvé. Contenu :"
            cat output/evaluation_metrics.json || echo "Erreur : Impossible de lire evaluation_metrics.json"
          else
            echo "Erreur : evaluation_metrics.json non trouvé."
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            output/ppo_bess_model_metrics.json
            output/evaluation_metrics.json
            output/ppo_pipeline_executed.ipynb

      - name: Notify on build results
        if: always()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\": \"Build job for ${{ github.repository }} completed.\nStatus: ${{ job.status }}\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
        shell: bash

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Verify artifacts
        run: |
          ls -l artifacts/
          if [ -f artifacts/ppo_bess_model_metrics.json ] && [ -f artifacts/evaluation_metrics.json ] && [ -f artifacts/ppo_pipeline_executed.ipynb ]; then
            echo "Tous les artefacts sont présents."
          else
            echo "Erreur : Certains artefacts sont manquants."
            exit 1
          fi
        shell: bash

      - name: Prepare files for GitHub Pages
        run: |
          mkdir -p docs
          cp artifacts/ppo_bess_model_metrics.json docs/
          cp artifacts/evaluation_metrics.json docs/
          cp artifacts/ppo_pipeline_executed.ipynb docs/
          cat << 'EOF' > docs/index.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>MLFlow Pipeline Artifacts</title>
          </head>
          <body>
            <h1>Deployed Artifacts</h1>
            <ul>
              <li><a href="ppo_bess_model_metrics.json">PPO BESS Model Metrics</a></li>
              <li><a href="evaluation_metrics.json">Evaluation Metrics</a></li>
              <li><a href="ppo_pipeline_executed.ipynb">Executed PPO Pipeline Notebook</a></li>
            </ul>
          </body>
          </html>
          EOF
        shell: bash

      - name: Commit and push to main branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs/
          git commit -m "Deploy artifacts to GitHub Pages (docs folder)" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
        shell: bash

      - name: Notify on deploy results
        if: always()
        run: |
          DEPLOY_URL="https://${{ github.repository_owner }}.github.io/${{ github.repository_name }}/"
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\": \"Deploy job for ${{ github.repository }} completed.\nStatus: ${{ job.status }}\nArtifacts deployed to: $DEPLOY_URL\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
        shell: bash
