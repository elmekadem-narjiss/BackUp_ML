name: MLFlow and Snakemake Workflow

on:
  schedule:
    - cron: '0 8 * * *'  # Run daily at 8:00 UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MLFLOW_URL: https://e06b-41-248-47-247.ngrok-free.app/
  PUSHGATEWAY_URL: https://e546-160-179-231-239.ngrok-free.app/

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install mlflow prometheus_client jq snakemake pulp==2.4 pulp[cbc] stable-baselines3 gym pandas numpy matplotlib shimmy jupyter nbconvert papermill google-auth google-auth-oauthlib google-api-python-client ipykernel
          pip list | grep google-api-python-client || { echo "Erreur : google-api-python-client non install√©"; exit 1; }
        shell: bash

      - name: Install Jupyter kernel
        run: |
          source venv/bin/activate
          python -m ipykernel install --user --name python3 --display-name "Python 3 (venv)"
        shell: bash

      - name: Save Google Drive credentials
        run: |
          printf '%s' "${{ secrets.GOOGLE_DRIVE_CLIENT_SECRETS }}" > client_secrets.json
          if [ -s client_secrets.json ]; then
            echo "client_secrets.json cr√©√© avec succ√®s."
            echo "Contenu brut de client_secrets.json (anonymis√©, premiers 50 caract√®res):"
            head -c 50 client_secrets.json && echo "..."
            echo "Contenu en hexad√©cimal (pour d√©tecter les caract√®res non imprimables):"
            xxd -l 50 client_secrets.json
            echo "Validation JSON:"
            cat client_secrets.json | jq . || { echo "Erreur : client_secrets.json n'est pas un JSON valide"; exit 1; }
          else
            echo "Erreur : client_secrets.json est vide ou n'a pas pu √™tre cr√©√©."
            exit 1
          fi
        shell: bash

      - name: Save Google Drive token
        run: |
          printf '%s' "${{ secrets.GOOGLE_DRIVE_TOKEN }}" > token.json
          if [ -s token.json ]; then
            echo "token.json cr√©√© avec succ√®s."
            echo "Contenu brut de token.json (anonymis√©, premiers 50 caract√®res):"
            head -c 50 token.json && echo "..."
            echo "Contenu en hexad√©cimal (pour d√©tecter les caract√®res non imprimables):"
            xxd -l 50 token.json
            echo "Validation JSON:"
            cat token.json | jq . || { echo "Erreur : token.json n'est pas un JSON valide"; exit 1; }
          else
            echo "Erreur : token.json est vide ou n'a pas pu √™tre cr√©√©."
            exit 1
          fi
        shell: bash

      - name: Download notebook and scripts
        run: |
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/ppo_pipeline.ipynb -O ppo_pipeline.ipynb
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/train_ppo.py -O train_ppo.py
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/evaluate_ppo.py -O evaluate_ppo.py
          wget https://raw.githubusercontent.com/elmekadem-narjiss/BackUp_ML/refs/heads/main/Backend/BESSBatteryEnv.py -O BESSBatteryEnv.py
        shell: bash

      - name: Download LSTM predictions from Google Drive
        run: |
          source venv/bin/activate
          echo "V√©rification de l'environnement Python..."
          python --version
          pip list | grep google-api-python-client || { echo "Erreur : google-api-python-client non install√©"; exit 1; }
          python Backend/download_file.py || { echo "√âchec de l'√©tape Download LSTM predictions from Google Drive"; exit 1; }
        shell: bash

      - name: Execute notebook
        run: |
          source venv/bin/activate
          mkdir -p output
          python -m papermill ppo_pipeline.ipynb output/ppo_pipeline_executed.ipynb \
            -p MLFLOW_URL $MLFLOW_URL \
            -p PUSHGATEWAY_URL $PUSHGATEWAY_URL \
            -p output_dir output \
            -p file_path lstm_predictions_charger.csv \
            --kernel python3
        shell: bash

      - name: Push selected MLFlow metrics to Prometheus
        run: |
          source venv/bin/activate
          declare -A metrics_92f5=(
            [loss]=0.04144944250583649
            [mae]=0.1347774024638297
            [mse]=0.039917658308037784
            [r2_score]=0.6619863834818595
            [rmse]=0.19979403972100315
          )
          declare -A metrics_ad0c=(
            [aic]=3157.583271036795
            [bic]=3180.9434357641003
            [df_model]=5
            [df_resid]=Inf
            [llf]=-1573.7916355183975
            [mse]=0.005455112014267468
            [scale]=1
          )
          for key in "${!metrics_92f5[@]}"; do
            value=${metrics_92f5[$key]}
            echo "$key{run=\"92f5893e1dbe4175a3f4313bc89c56b4\"} $value" \
              | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics
          done
          for key in "${!metrics_ad0c[@]}"; do
            value=${metrics_ad0c[$key]}
            echo "$key{run=\"ad0cf78265204f34b84a40aa09895c7f\"} $value" \
              | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics
          done
          if [ -f output/ppo_bess_model_metrics.json ]; then
            TRAIN_METRICS=$(cat output/ppo_bess_model_metrics.json | jq -r 'to_entries | .[] | "\\(.key){run=\\\"ppo_training\\\"} \\(.value)"')
            while IFS= read -r metric; do
              echo "$metric" | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/ppo_metrics
            done <<< "$TRAIN_METRICS"
          fi
          if [ -f output/evaluation_metrics.json ]; then
            EVAL_METRICS=$(cat output/evaluation_metrics.json | jq -r 'to_entries | .[] | "\\(.key){run=\\\"ppo_evaluation\\\"} \\(.value)"')
            while IFS= read -r metric; do
              echo "$metric" | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/ppo_metrics
            done <<< "$EVAL_METRICS"
          fi
        shell: bash

      - name: Push global success metric to Prometheus
        run: |
          echo "success 1" \
            | curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/mlflow_and_snakemake_metrics
        shell: bash

      - name: Check metrics in PushGateway
        run: |
          echo "üîç V√©rification des m√©triques dans PushGateway..."
          curl -s $PUSHGATEWAY_URL/metrics | grep -E 'scale|loss|mae|mse|aic|bic|llf|r2_score|rmse|df_model|df_resid|success|avg_reward|avg_cycles|avg_accuracy|total_reward|cycles|accuracy' || echo "‚ö†Ô∏è Pas de m√©triques visibles"
        shell: bash

      - name: Complete Monitoring
        run: echo "‚úÖ Fin de l'ex√©cution, v√©rification via Grafana et Prometheus"
        shell: bash
