name: MLFlow and Snakemake Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Set up virtual environment and install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        echo "mlflow" > requirements.txt
        echo "prometheus_client" >> requirements.txt
        echo "snakemake" >> requirements.txt
        pip install -r requirements.txt
        pip install pulp==2.7.0
        command -v snakemake || echo "⚠️ Snakemake non trouvé"
      shell: bash

    - name: Start MLFlow server
      run: |
        source venv/bin/activate
        nohup mlflow ui --host 0.0.0.0 --port 5000 &
        sleep 10
      shell: bash

    - name: Start Prometheus PushGateway
      run: |
        docker run -d -p 9091:9091 prom/pushgateway
        sleep 5
      shell: bash

    - name: Fetch and push MLFlow metrics to Prometheus
      run: |
        source venv/bin/activate

        # Récupérer les expériences et runs depuis MLFlow
        experiments=$(curl -s "http://localhost:5000/api/2.0/mlflow/experiments/list" | jq -r '.experiments[].experiment_id')

        for exp in $experiments; do
          # Récupérer les runs d'une expérience
          runs=$(curl -s "http://localhost:5000/api/2.0/mlflow/runs/search?experiment_ids=$exp" | jq -r '.runs[].run_id')
          
          for run in $runs; do
            # Récupérer les métriques d'un run spécifique
            metrics=$(curl -s "http://localhost:5000/api/2.0/mlflow/runs/get?run_id=$run" | jq -r '.data.metrics')

            for metric in $(echo "$metrics" | jq -r 'keys[]'); do
              value=$(echo "$metrics" | jq -r ".\"$metric\"")
              
              # Pousser la métrique vers Prometheus
              echo "$metric{$exp=\"$run\"} $value" | curl --data-binary @- http://localhost:9091/metrics/job/mlflow_metrics
            done
          done
        done
      shell: bash

    - name: Push global success metric to Prometheus
      run: |
        echo "success 1" | curl --data-binary @- http://127.0.0.1:9091/metrics/job/mlflow_metrics
      shell: bash

    - name: Check metrics in PushGateway
      run: |
        curl http://127.0.0.1:9091/metrics | grep -E 'success|execution_duration_seconds|step_status' || echo "⚠️ Certaines métriques manquent"
      shell: bash

    - name: Complete Monitoring
      run: echo "✅ Fin de l'exécution, vérification via Grafana et Prometheus"
      shell: bash
