from pathlib import Path
import os
import yaml

# Charger la configuration depuis le répertoire Backend
with open("Backend/config.yaml", "r") as f:
    config = yaml.safe_load(f)

# Règle pour vérifier la disponibilité des fichiers locaux nécessaires
rule check_requirements:
    output:
        "data/requirements_check.txt"
    run:
        # Vérifier si les fichiers d'authentification Google Drive existent
        required_files = ["client_secrets.json", "token.json"]
        missing_files = [f for f in required_files if not os.path.exists(f)]
        if missing_files:
            raise Exception(f"Fichiers manquants : {missing_files}")
        with open(output[0], "w") as f:
            f.write("Tous les fichiers nécessaires sont présents")

# Règle pour télécharger les données
rule download_data:
    input:
        "data/requirements_check.txt"
    output:
        "data/raw_data.csv"
    params:
        file_name=config["data"]["file_name"]
    shell:
        """
        python Backend/download_file.py --file-name {params.file_name} --output {output}
        echo "Téléchargement terminé, vérification de {output}"
        ls -l {output} || echo "Erreur : {output} non trouvé après téléchargement"
        """

# Règle pour entraîner le modèle
rule train_model:
    input:
        "data/raw_data.csv"
    output:
        "output/ppo_bess_model_metrics.json"
    shell:
        """
        source venv/bin/activate
        echo "Exécution de train_ppo.py avec input: {input}"
        python Backend/train_ppo.py --input {input} --output {output} || { echo "Erreur lors de l'exécution de train_ppo.py, vérifiez les logs"; exit 1; }
        ls -l {output} || { echo "Erreur : {output} non créé"; exit 1; }
        echo "Contenu de {output} :"
        cat {output} || echo "Erreur : Impossible de lire {output}"
        """

# Règle principale
rule all:
    input:
        "output/ppo_bess_model_metrics.json"
