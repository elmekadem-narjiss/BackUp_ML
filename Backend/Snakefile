from pathlib import Path
import requests
import os
import yaml

# Charger la configuration
with open("config.yaml", "r") as f:
    config = yaml.safe_load(f)

# Règle pour vérifier la disponibilité des données
rule check_data_availability:
    output:
        "data/availability_check.txt"
    params:
        url=config["data"]["google_drive_url"]
    run:
        try:
            response = requests.head(params.url, timeout=10)
            if response.status_code == 200:
                with open(output[0], "w") as f:
                    f.write(f"Données disponibles depuis {params.url}")
            else:
                raise Exception(f"Erreur: Statut HTTP {response.status_code}")
        except requests.exceptions.RequestException as e:
            raise Exception(f"Échec de la vérification des données: {e}")

# Règle pour télécharger les données
rule download_data:
    input:
        "data/availability_check.txt"
    output:
        "data/raw_data.csv"
    params:
        url=config["data"]["google_drive_url"]
    shell:
        """
        python Backend/download_file.py --url {params.url} --output {output}
        """

# Règle pour entraîner le modèle
rule train_model:
    input:
        "data/raw_data.csv"
    output:
        "output/ppo_bess_model_metrics.json"
    shell:
        """
        source venv/bin/activate
        snakemake --cores 1 train_ppo
        """

# Règle principale
rule all:
    input:
        "output/ppo_bess_model_metrics.json"
